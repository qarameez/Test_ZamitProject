{"name": "test_Footer_Curricular", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (94, 5527)\n  (Session info: chrome=111.0.5563.147)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x0044DCE3]\n\t(No symbol) [0x003E39D1]\n\t(No symbol) [0x002F4DA8]\n\t(No symbol) [0x003252EA]\n\t(No symbol) [0x00323BBA]\n\t(No symbol) [0x00321EFB]\n\t(No symbol) [0x00321027]\n\t(No symbol) [0x00318D05]\n\t(No symbol) [0x0033AECC]\n\t(No symbol) [0x00318726]\n\t(No symbol) [0x0033B224]\n\t(No symbol) [0x0034D57C]\n\t(No symbol) [0x0033ACC6]\n\t(No symbol) [0x00316F68]\n\t(No symbol) [0x003180CD]\n\tGetHandleVerifier [0x006C3832+2506274]\n\tGetHandleVerifier [0x006F9794+2727300]\n\tGetHandleVerifier [0x006FE36C+2746716]\n\tGetHandleVerifier [0x004F6690+617600]\n\t(No symbol) [0x003EC712]\n\t(No symbol) [0x003F1FF8]\n\t(No symbol) [0x003F20DB]\n\t(No symbol) [0x003FC63B]\n\tBaseThreadInitThunk [0x76B87D69+25]\n\tRtlInitializeExceptionChain [0x770CB74B+107]\n\tRtlClearBits [0x770CB6CF+191]", "trace": "self = <testCases.test_login_page.TestZamit object at 0x000001F6F1681FF0>\n\n    def test_Footer_Curricular(self):\n>       self.driver.find_element(By.XPATH, \"//a[contains(text(),'Co-curriculars')]\").click()\n\ntestCases\\test_login_page.py:241: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:403: in _execute\n    return self._parent.execute(command, params)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F6F20A6E90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...dInitThunk [0x76B87D69+25]\\\\n\\\\tRtlInitializeExceptionChain [0x770CB74B+107]\\\\n\\\\tRtlClearBits [0x770CB6CF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (94, 5527)\nE         (Session info: chrome=111.0.5563.147)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x0044DCE3]\nE       \t(No symbol) [0x003E39D1]\nE       \t(No symbol) [0x002F4DA8]\nE       \t(No symbol) [0x003252EA]\nE       \t(No symbol) [0x00323BBA]\nE       \t(No symbol) [0x00321EFB]\nE       \t(No symbol) [0x00321027]\nE       \t(No symbol) [0x00318D05]\nE       \t(No symbol) [0x0033AECC]\nE       \t(No symbol) [0x00318726]\nE       \t(No symbol) [0x0033B224]\nE       \t(No symbol) [0x0034D57C]\nE       \t(No symbol) [0x0033ACC6]\nE       \t(No symbol) [0x00316F68]\nE       \t(No symbol) [0x003180CD]\nE       \tGetHandleVerifier [0x006C3832+2506274]\nE       \tGetHandleVerifier [0x006F9794+2727300]\nE       \tGetHandleVerifier [0x006FE36C+2746716]\nE       \tGetHandleVerifier [0x004F6690+617600]\nE       \t(No symbol) [0x003EC712]\nE       \t(No symbol) [0x003F1FF8]\nE       \t(No symbol) [0x003F20DB]\nE       \t(No symbol) [0x003FC63B]\nE       \tBaseThreadInitThunk [0x76B87D69+25]\nE       \tRtlInitializeExceptionChain [0x770CB74B+107]\nE       \tRtlClearBits [0x770CB6CF+191]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: ElementClickInterceptedException"}, "start": 1680239612226, "stop": 1680239613376, "uuid": "d068bc9f-2798-470f-823b-7fb84e9425d7", "historyId": "0bc9576fa8362beb2d0cf73c7ea90aec", "testCaseId": "066c057772e78c6dddd443b5629500f0", "fullName": "testCases.test_login_page.TestZamit#test_Footer_Curricular", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_login_page"}, {"name": "subSuite", "value": "TestZamit"}, {"name": "host", "value": "M061"}, {"name": "thread", "value": "1764-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_login_page"}]}