{"name": "test_Invalid_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\nBacktrace:\n\t(No symbol) [0x011837D3]\n\t(No symbol) [0x01118B81]\n\t(No symbol) [0x0101B230]\n\t(No symbol) [0x01040758]\n\t(No symbol) [0x0106B316]\n\t(No symbol) [0x01068092]\n\t(No symbol) [0x01067544]\n\t(No symbol) [0x00FF5427]\n\t(No symbol) [0x00FF5B0E]\n\t(No symbol) [0x00FF5EEA]\n\tGetHandleVerifier [0x013FABF2+2510930]\n\tGetHandleVerifier [0x01428EC1+2700065]\n\tGetHandleVerifier [0x0142C86C+2714828]\n\tGetHandleVerifier [0x01233480+645344]\n\t(No symbol) [0x01120FD2]\n\t(No symbol) [0x00FF516A]\n\t(No symbol) [0x00FF4B96]\n\tGetHandleVerifier [0x01448C9C+2830588]\n\tBaseThreadInitThunk [0x76837D69+25]\n\tRtlInitializeExceptionChain [0x776CBB9B+107]\n\tRtlClearBits [0x776CBB1F+191]", "trace": "self = <allure_test.allure_test1.TestZamit object at 0x0000024D37DEABC0>\n\n    def test_Invalid_login(self):\n    \n        # Login to zamit\n        self.driver = webdriver.Chrome()\n        self.driver.maximize_window()\n        self.driver.get(\"https://www.zamit.one/login\")\n        self.driver.find_element(By.ID, \"loginemail\").send_keys(\"shopcluesqa009@gmail.com\")\n        time.sleep(2)\n        self.driver.find_element(By.ID, \"submit-login\").click()\n        time.sleep(2)\n    \n        # To singin\n        self.driver.find_element(By.XPATH, '//input[@id=\"password\"]').send_keys('qwerty@1233')\n        time.sleep(2)\n        self.driver.find_element(By.XPATH, '//button[@id=\"submit-login\"]').click()\n        ZamitLoginid = self.driver.find_element(By.XPATH,\"//p[@id='login_error']\").is_displayed()\n        time.sleep(3)\n        if ZamitLoginid == True:\n            assert True\n        else:\n            assert False\n        self.driver.close()\n        time.sleep(3)\n        print(\"Pass\")\n    \n        time.sleep(3)\n>       self.driver.close()\n\nallure_test1.py:201: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:551: in close\n    self.execute(Command.CLOSE)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024D37EBA0B0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"Backtrac...dInitThunk [0x76837D69+25]\\\\n\\\\tRtlInitializeExceptionChain [0x776CBB9B+107]\\\\n\\\\tRtlClearBits [0x776CBB1F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x011837D3]\nE       \t(No symbol) [0x01118B81]\nE       \t(No symbol) [0x0101B230]\nE       \t(No symbol) [0x01040758]\nE       \t(No symbol) [0x0106B316]\nE       \t(No symbol) [0x01068092]\nE       \t(No symbol) [0x01067544]\nE       \t(No symbol) [0x00FF5427]\nE       \t(No symbol) [0x00FF5B0E]\nE       \t(No symbol) [0x00FF5EEA]\nE       \tGetHandleVerifier [0x013FABF2+2510930]\nE       \tGetHandleVerifier [0x01428EC1+2700065]\nE       \tGetHandleVerifier [0x0142C86C+2714828]\nE       \tGetHandleVerifier [0x01233480+645344]\nE       \t(No symbol) [0x01120FD2]\nE       \t(No symbol) [0x00FF516A]\nE       \t(No symbol) [0x00FF4B96]\nE       \tGetHandleVerifier [0x01448C9C+2830588]\nE       \tBaseThreadInitThunk [0x76837D69+25]\nE       \tRtlInitializeExceptionChain [0x776CBB9B+107]\nE       \tRtlClearBits [0x776CBB1F+191]\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: InvalidSessionIdException"}, "start": 1678595345808, "stop": 1678595371168, "uuid": "e08beb41-13b8-424a-b82d-322db338a4d2", "historyId": "585f4507ac8f89ee6d61c7bfa2a45b5d", "testCaseId": "29689dec7c1ec2cb92b292c24c85aac9", "fullName": "allure_test1.TestZamit#test_Invalid_login", "labels": [{"name": "suite", "value": "allure_test1"}, {"name": "subSuite", "value": "TestZamit"}, {"name": "host", "value": "M061"}, {"name": "thread", "value": "14732-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "allure_test1"}]}